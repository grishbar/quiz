{"ast":null,"code":"var _jsxFileName = \"/Users/Gregory/projects/quiz/client/src/components/QuestionItem.js\";\nimport React from 'react';\nexport default class QuestionOne extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      choosedAnswer: '0'\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({\n      choosedAnswer: event.target.value\n    });\n  }\n\n  handleSubmit(event) {\n    //console.log(this.state.choosedAnswer);\n    event.preventDefault();\n    this.props.updateAnswers(this.props.questionNumber, this.state.choosedAnswer);\n    this.props.updateQuestionState(this.props.questionNumber, false); //сюда дописать сохранение в локальное хранилище пользователя\n  }\n\n  async update(choosedAnswer) {\n    console.log('start post');\n    console.log(this.props.questionNumber);\n    console.log(choosedAnswer);\n    await fetch('/api/question-data/add-answers', {\n      method: 'POST',\n      body: {\n        questionNumber: this.props.questionNumber,\n        choosedAnswer: choosedAnswer\n      }\n    });\n  }\n\n  render() {\n    return React.createElement(\"form\", {\n      className: \"question-block\",\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"question-block__question\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }, this.props.question), this.props.questionState[this.props.questionNumber] && this.props.variants.map((item, index) => React.createElement(\"label\", {\n      key: index,\n      htmlFor: 'opt' + index,\n      className: \"radio\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"radio\",\n      name: \"question\",\n      id: 'opt' + index,\n      className: \"hidden\",\n      value: index,\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      className: \"label\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }), item)), this.props.questionState[this.props.questionNumber] && React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      type: \"submit\",\n      className: \"button\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, \"\\u041E\\u0442\\u043F\\u0440\\u0430\\u0432\\u0438\\u0442\\u044C\"), \" \"));\n  }\n\n}","map":{"version":3,"sources":["/Users/Gregory/projects/quiz/client/src/components/QuestionItem.js"],"names":["React","QuestionOne","Component","constructor","props","state","choosedAnswer","handleChange","bind","handleSubmit","event","setState","target","value","preventDefault","updateAnswers","questionNumber","updateQuestionState","update","console","log","fetch","method","body","render","question","questionState","variants","map","item","index"],"mappings":"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","sourcesContent":["import React from 'react';\n\nexport default class QuestionOne extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {choosedAnswer: '0'};\n    \n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleChange(event) {\n        this.setState({choosedAnswer: event.target.value});\n    }\n    \n    handleSubmit(event) {\n      //console.log(this.state.choosedAnswer);\n      event.preventDefault();\n      this.props.updateAnswers(this.props.questionNumber, this.state.choosedAnswer);\n      this.props.updateQuestionState(this.props.questionNumber, false);\n      //сюда дописать сохранение в локальное хранилище пользователя\n    }\n\n    async update(choosedAnswer) {\n        console.log('start post');\n        console.log(this.props.questionNumber);\n        console.log(choosedAnswer);\n        await fetch('/api/question-data/add-answers', {method: 'POST',\n                body: { questionNumber:this.props.questionNumber, choosedAnswer:choosedAnswer }});\n    }\n    \n    render () {\n\n        return (\n            <form className=\"question-block\" onSubmit={this.handleSubmit}>\n                <div className=\"question-block__question\">{this.props.question}</div>\n                {this.props.questionState[this.props.questionNumber] && this.props.variants.map((item, index) => (\n                    <label key={index} htmlFor={'opt' + index} className=\"radio\">\n                        <input type=\"radio\" name=\"question\" id={'opt' + index} className=\"hidden\" value={index} onChange={this.handleChange} />\n                        <span className=\"label\"></span>{item}\n                    </label>\n                ))}\n                {this.props.questionState[this.props.questionNumber] && <p><button type=\"submit\" className=\"button\">Отправить</button> </p>}\n            </form>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}